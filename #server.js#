// En Auth server designad efter https://www.codementor.io/mayowa.a/how-to-build-a-simple-session-based-authentication-system-with-nodejs-from-scratch-6vn67mcy3


var express = require('express');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var session = require('express-session');
var morgan = require('morgan');
var User = require('./models/user');
var dirname = require('./dirname');

//invoke an instance of express application
var app = express();

//set our aplication port
app.set('port', 9000);

//set morgan to log onfp about our requests for development use.
app.use(morgan('dev'));

//initialize body-parser to parse incoming parameters requests to req.body
app.use(bodyParser.urlencoded({extended: true}));

//initialize cookie-parser to allow us access the cookies stored in the browser.
app.use(cookieParser());

//initialize express-session to allow us track the logged-in user across sessions.
app.use(session({
	key: 'users_id',
	secret: 'somerandomstuff',
	resave: false,
	saveUninitialized: false,
	cookie: {
		expires: 600000
	}
}));


/* This middleware will check if user's cookie is still saved in browser and if the
 user is not set, then automatically log the user out.
 This usually happens when you stop your express server after login, your cookie still remains saved in the browser. */
 app.use((req, res, next) => {
 	if (req.cookies.users_id && !req.session.user){
 		res.clearCookie('users_id');
 	}
 	next();
 });

 // middleware function to check for logged-in users
 var sessionChecker = (req, res, next) =>{
 	if (req.session.user && req.cookies.users_id) {
 		res.redirect('/dashboard');
 	} else {
 		next();
 	}
 };

 // route for Home-Page

 app.get('/', sessionChecker, (req,res) => {
 	res.redirect('/login');
 });

 // route for signup
 app.route('/signup')
 	.get(sessionChecker, (req, res) =>{
 		res.sendFile(dirname + '/public/signup.html');
 	})
 	.post((req, res) => {
 		User.create({
 			username: req.body.username,
 			email: req.body.email,
 			password:req.password
 		})
 		.then(user => {
 			req.session.user = user.dataValues;
 			res.redirect('/dashboard');
 		})
 		.catch(error => {
 			res.redirect('/signup');
 		});
 	});

// route for user Login
app.route('/login')
.get(sessionChecker, (req,res) => {
	res.sendFile(dirname+'/public/login.html');
})
.post((req, res) => {
	var username = req.body.username,
		password = req.body.password;

	User.findOne({ where: { username: username } }).then(function(user) {
		if (!user) {
			res.redirect('/login');
		} else if (!user.validPassword(password)) {
			res.redirect('/login');
		} else {
			req.session.user = user.dataValues;
			res.redirect('/dashboard');
		}
	});
});

// route for user's dashboard
app.get('/dashboard', (req, res) => {
	if (req.session.user && req.cookies.users_id) {
		res.sendFile(dirname+'/public/dashboard.html');
	} else {
		res.redirect('/login');
	}

});

// route for user logout
app.get('/logout', (req,res) => {
	if (req.session.user && req.cookies.users_id) {
		res.clearCookie('users_id');
		res.redirect('/');
	} else {
		res.redirect('/login');
	}
});

// Route for handling 404 requests( unavailable routes)
app.use(function (req, res, next) {
	res.status(404).send("Sorry, can't find that...")
});

app.listen(app.get('port'), () => console.log(`App started on port ${app.get('port')}`));
